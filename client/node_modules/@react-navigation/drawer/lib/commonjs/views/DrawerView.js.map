{"version":3,"sources":["DrawerView.tsx"],"names":["getDefaultDrawerWidth","height","width","smallerAxisSize","Math","min","isLandscape","isTablet","appBarHeight","Platform","OS","maxWidth","GestureHandlerWrapper","GestureHandlerRootView","View","DrawerViewBase","state","navigation","descriptors","drawerContent","props","detachInactiveScreens","focusedRouteKey","routes","index","key","drawerHideStatusBarOnOpen","drawerPosition","I18nManager","isRTL","drawerStatusBarAnimation","drawerStyle","drawerType","select","ios","default","gestureEnabled","gestureHandlerProps","keyboardDismissMode","overlayColor","sceneContainerStyle","swipeEdgeWidth","swipeEnabled","swipeMinDistance","options","loaded","setLoaded","React","useState","includes","dimensions","colors","drawerStatus","handleDrawerOpen","useCallback","dispatch","DrawerActions","openDrawer","target","handleDrawerClose","closeDrawer","useEffect","subscription","BackHandler","addEventListener","remove","renderDrawerContent","progress","renderSceneContent","styles","content","map","route","descriptor","lazy","unmountOnBlur","isFocused","header","layout","name","headerLeft","StyleSheet","absoluteFill","opacity","headerShown","headerStatusBarHeight","render","backgroundColor","background","card","borderRightColor","border","borderRightWidth","hairlineWidth","borderLeftColor","borderLeftWidth","DrawerView","rest","create","flex"],"mappings":"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","sourcesContent":["import * as React from 'react';\nimport {\n  View,\n  StyleSheet,\n  I18nManager,\n  Platform,\n  BackHandler,\n  NativeEventSubscription,\n} from 'react-native';\nimport { ScreenContainer } from 'react-native-screens';\nimport { useSafeAreaFrame } from 'react-native-safe-area-context';\nimport {\n  NavigationHelpersContext,\n  DrawerNavigationState,\n  DrawerActions,\n  useTheme,\n  ParamListBase,\n} from '@react-navigation/native';\nimport {\n  Header,\n  Screen,\n  SafeAreaProviderCompat,\n  getHeaderTitle,\n} from '@react-navigation/elements';\n\nimport { GestureHandlerRootView } from './GestureHandler';\nimport ScreenFallback from './ScreenFallback';\nimport DrawerToggleButton from './DrawerToggleButton';\nimport DrawerContent from './DrawerContent';\nimport Drawer from './Drawer';\nimport DrawerStatusContext from '../utils/DrawerStatusContext';\nimport DrawerPositionContext from '../utils/DrawerPositionContext';\nimport getDrawerStatusFromState from '../utils/getDrawerStatusFromState';\nimport type {\n  DrawerDescriptorMap,\n  DrawerNavigationConfig,\n  DrawerNavigationHelpers,\n  DrawerContentComponentProps,\n  DrawerHeaderProps,\n  DrawerNavigationProp,\n} from '../types';\n\ntype Props = DrawerNavigationConfig & {\n  state: DrawerNavigationState<ParamListBase>;\n  navigation: DrawerNavigationHelpers;\n  descriptors: DrawerDescriptorMap;\n};\n\nconst getDefaultDrawerWidth = ({\n  height,\n  width,\n}: {\n  height: number;\n  width: number;\n}) => {\n  /*\n   * Default drawer width is screen width - header height\n   * with a max width of 280 on mobile and 320 on tablet\n   * https://material.io/components/navigation-drawer\n   */\n  const smallerAxisSize = Math.min(height, width);\n  const isLandscape = width > height;\n  const isTablet = smallerAxisSize >= 600;\n  const appBarHeight = Platform.OS === 'ios' ? (isLandscape ? 32 : 44) : 56;\n  const maxWidth = isTablet ? 320 : 280;\n\n  return Math.min(smallerAxisSize - appBarHeight, maxWidth);\n};\n\nconst GestureHandlerWrapper = GestureHandlerRootView ?? View;\n\nfunction DrawerViewBase({\n  state,\n  navigation,\n  descriptors,\n  drawerContent = (props: DrawerContentComponentProps) => (\n    <DrawerContent {...props} />\n  ),\n  detachInactiveScreens = true,\n}: Props) {\n  const focusedRouteKey = state.routes[state.index].key;\n  const {\n    drawerHideStatusBarOnOpen = false,\n    drawerPosition = I18nManager.isRTL ? 'right' : 'left',\n    drawerStatusBarAnimation = 'slide',\n    drawerStyle,\n    drawerType = Platform.select({ ios: 'slide', default: 'front' }),\n    gestureEnabled,\n    gestureHandlerProps,\n    keyboardDismissMode = 'on-drag',\n    overlayColor = 'rgba(0, 0, 0, 0.5)',\n    sceneContainerStyle,\n    swipeEdgeWidth,\n    swipeEnabled,\n    swipeMinDistance,\n  } = descriptors[focusedRouteKey].options;\n\n  const [loaded, setLoaded] = React.useState([focusedRouteKey]);\n\n  if (!loaded.includes(focusedRouteKey)) {\n    setLoaded([...loaded, focusedRouteKey]);\n  }\n\n  const dimensions = useSafeAreaFrame();\n\n  const { colors } = useTheme();\n\n  const drawerStatus = getDrawerStatusFromState(state);\n\n  const handleDrawerOpen = React.useCallback(() => {\n    navigation.dispatch({\n      ...DrawerActions.openDrawer(),\n      target: state.key,\n    });\n  }, [navigation, state.key]);\n\n  const handleDrawerClose = React.useCallback(() => {\n    navigation.dispatch({\n      ...DrawerActions.closeDrawer(),\n      target: state.key,\n    });\n  }, [navigation, state.key]);\n\n  React.useEffect(() => {\n    let subscription: NativeEventSubscription | undefined;\n\n    if (drawerStatus === 'open') {\n      // We only add the subscription when drawer opens\n      // This way we can make sure that the subscription is added as late as possible\n      // This will make sure that our handler will run first when back button is pressed\n      subscription = BackHandler.addEventListener('hardwareBackPress', () => {\n        handleDrawerClose();\n\n        return true;\n      });\n    }\n\n    return () => subscription?.remove();\n  }, [handleDrawerClose, drawerStatus, navigation, state.key]);\n\n  const renderDrawerContent = ({ progress }: any) => {\n    return (\n      <DrawerPositionContext.Provider value={drawerPosition}>\n        {drawerContent({\n          progress: progress,\n          state: state,\n          navigation: navigation,\n          descriptors: descriptors,\n        })}\n      </DrawerPositionContext.Provider>\n    );\n  };\n\n  const renderSceneContent = () => {\n    return (\n      // @ts-ignore\n      <ScreenContainer enabled={detachInactiveScreens} style={styles.content}>\n        {state.routes.map((route, index) => {\n          const descriptor = descriptors[route.key];\n          const { lazy = true, unmountOnBlur } = descriptor.options;\n          const isFocused = state.index === index;\n\n          if (unmountOnBlur && !isFocused) {\n            return null;\n          }\n\n          if (lazy && !loaded.includes(route.key) && !isFocused) {\n            // Don't render a lazy screen if we've never navigated to it\n            return null;\n          }\n\n          const {\n            header = ({ layout, options }: DrawerHeaderProps) => (\n              <Header\n                {...options}\n                layout={layout}\n                title={getHeaderTitle(options, route.name)}\n                headerLeft={\n                  options.headerLeft ??\n                  ((props) => <DrawerToggleButton {...props} />)\n                }\n              />\n            ),\n          } = descriptor.options;\n\n          return (\n            <ScreenFallback\n              key={route.key}\n              style={[StyleSheet.absoluteFill, { opacity: isFocused ? 1 : 0 }]}\n              visible={isFocused}\n              enabled={detachInactiveScreens}\n            >\n              <Screen\n                route={descriptor.route}\n                navigation={descriptor.navigation}\n                headerShown={descriptor.options.headerShown}\n                headerStatusBarHeight={descriptor.options.headerStatusBarHeight}\n                header={header({\n                  layout: dimensions,\n                  route: descriptor.route,\n                  navigation: descriptor.navigation as DrawerNavigationProp<ParamListBase>,\n                  options: descriptor.options,\n                })}\n              >\n                {descriptor.render()}\n              </Screen>\n            </ScreenFallback>\n          );\n        })}\n      </ScreenContainer>\n    );\n  };\n\n  return (\n    <DrawerStatusContext.Provider value={drawerStatus}>\n      <Drawer\n        open={drawerStatus !== 'closed'}\n        gestureEnabled={gestureEnabled}\n        swipeEnabled={swipeEnabled}\n        onOpen={handleDrawerOpen}\n        onClose={handleDrawerClose}\n        gestureHandlerProps={gestureHandlerProps}\n        drawerType={drawerType}\n        drawerPosition={drawerPosition}\n        sceneContainerStyle={[\n          { backgroundColor: colors.background },\n          sceneContainerStyle,\n        ]}\n        drawerStyle={[\n          {\n            width: getDefaultDrawerWidth(dimensions),\n            backgroundColor: colors.card,\n          },\n          drawerType === 'permanent' &&\n            (drawerPosition === 'left'\n              ? {\n                  borderRightColor: colors.border,\n                  borderRightWidth: StyleSheet.hairlineWidth,\n                }\n              : {\n                  borderLeftColor: colors.border,\n                  borderLeftWidth: StyleSheet.hairlineWidth,\n                }),\n          drawerStyle,\n        ]}\n        overlayStyle={{ backgroundColor: overlayColor }}\n        swipeEdgeWidth={swipeEdgeWidth}\n        swipeDistanceThreshold={swipeMinDistance}\n        hideStatusBarOnOpen={drawerHideStatusBarOnOpen}\n        statusBarAnimation={drawerStatusBarAnimation}\n        renderDrawerContent={renderDrawerContent}\n        renderSceneContent={renderSceneContent}\n        keyboardDismissMode={keyboardDismissMode}\n        dimensions={dimensions}\n      />\n    </DrawerStatusContext.Provider>\n  );\n}\n\nexport default function DrawerView({ navigation, ...rest }: Props) {\n  return (\n    <NavigationHelpersContext.Provider value={navigation}>\n      <SafeAreaProviderCompat>\n        <GestureHandlerWrapper style={styles.content}>\n          <DrawerViewBase navigation={navigation} {...rest} />\n        </GestureHandlerWrapper>\n      </SafeAreaProviderCompat>\n    </NavigationHelpersContext.Provider>\n  );\n}\n\nconst styles = StyleSheet.create({\n  content: {\n    flex: 1,\n  },\n});\n"]}