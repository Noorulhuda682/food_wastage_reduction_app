function _extends() { _extends = Object.assign || function (target) { for (var i = 1; i < arguments.length; i++) { var source = arguments[i]; for (var key in source) { if (Object.prototype.hasOwnProperty.call(source, key)) { target[key] = source[key]; } } } return target; }; return _extends.apply(this, arguments); }

import * as React from 'react';
import { View, StyleSheet, I18nManager, Platform, BackHandler } from 'react-native';
import { ScreenContainer } from 'react-native-screens';
import { useSafeAreaFrame } from 'react-native-safe-area-context';
import { NavigationHelpersContext, DrawerActions, useTheme } from '@react-navigation/native';
import { Header, Screen, SafeAreaProviderCompat, getHeaderTitle } from '@react-navigation/elements';
import { GestureHandlerRootView } from './GestureHandler';
import ScreenFallback from './ScreenFallback';
import DrawerToggleButton from './DrawerToggleButton';
import DrawerContent from './DrawerContent';
import Drawer from './Drawer';
import DrawerStatusContext from '../utils/DrawerStatusContext';
import DrawerPositionContext from '../utils/DrawerPositionContext';
import getDrawerStatusFromState from '../utils/getDrawerStatusFromState';

const getDefaultDrawerWidth = ({
  height,
  width
}) => {
  /*
   * Default drawer width is screen width - header height
   * with a max width of 280 on mobile and 320 on tablet
   * https://material.io/components/navigation-drawer
   */
  const smallerAxisSize = Math.min(height, width);
  const isLandscape = width > height;
  const isTablet = smallerAxisSize >= 600;
  const appBarHeight = Platform.OS === 'ios' ? isLandscape ? 32 : 44 : 56;
  const maxWidth = isTablet ? 320 : 280;
  return Math.min(smallerAxisSize - appBarHeight, maxWidth);
};

const GestureHandlerWrapper = GestureHandlerRootView !== null && GestureHandlerRootView !== void 0 ? GestureHandlerRootView : View;

function DrawerViewBase({
  state,
  navigation,
  descriptors,
  drawerContent = props => /*#__PURE__*/React.createElement(DrawerContent, props),
  detachInactiveScreens = true
}) {
  const focusedRouteKey = state.routes[state.index].key;
  const {
    drawerHideStatusBarOnOpen = false,
    drawerPosition = I18nManager.isRTL ? 'right' : 'left',
    drawerStatusBarAnimation = 'slide',
    drawerStyle,
    drawerType = Platform.select({
      ios: 'slide',
      default: 'front'
    }),
    gestureEnabled,
    gestureHandlerProps,
    keyboardDismissMode = 'on-drag',
    overlayColor = 'rgba(0, 0, 0, 0.5)',
    sceneContainerStyle,
    swipeEdgeWidth,
    swipeEnabled,
    swipeMinDistance
  } = descriptors[focusedRouteKey].options;
  const [loaded, setLoaded] = React.useState([focusedRouteKey]);

  if (!loaded.includes(focusedRouteKey)) {
    setLoaded([...loaded, focusedRouteKey]);
  }

  const dimensions = useSafeAreaFrame();
  const {
    colors
  } = useTheme();
  const drawerStatus = getDrawerStatusFromState(state);
  const handleDrawerOpen = React.useCallback(() => {
    navigation.dispatch({ ...DrawerActions.openDrawer(),
      target: state.key
    });
  }, [navigation, state.key]);
  const handleDrawerClose = React.useCallback(() => {
    navigation.dispatch({ ...DrawerActions.closeDrawer(),
      target: state.key
    });
  }, [navigation, state.key]);
  React.useEffect(() => {
    let subscription;

    if (drawerStatus === 'open') {
      // We only add the subscription when drawer opens
      // This way we can make sure that the subscription is added as late as possible
      // This will make sure that our handler will run first when back button is pressed
      subscription = BackHandler.addEventListener('hardwareBackPress', () => {
        handleDrawerClose();
        return true;
      });
    }

    return () => {
      var _subscription;

      return (_subscription = subscription) === null || _subscription === void 0 ? void 0 : _subscription.remove();
    };
  }, [handleDrawerClose, drawerStatus, navigation, state.key]);

  const renderDrawerContent = ({
    progress
  }) => {
    return /*#__PURE__*/React.createElement(DrawerPositionContext.Provider, {
      value: drawerPosition
    }, drawerContent({
      progress: progress,
      state: state,
      navigation: navigation,
      descriptors: descriptors
    }));
  };

  const renderSceneContent = () => {
    return (
      /*#__PURE__*/
      // @ts-ignore
      React.createElement(ScreenContainer, {
        enabled: detachInactiveScreens,
        style: styles.content
      }, state.routes.map((route, index) => {
        const descriptor = descriptors[route.key];
        const {
          lazy = true,
          unmountOnBlur
        } = descriptor.options;
        const isFocused = state.index === index;

        if (unmountOnBlur && !isFocused) {
          return null;
        }

        if (lazy && !loaded.includes(route.key) && !isFocused) {
          // Don't render a lazy screen if we've never navigated to it
          return null;
        }

        const {
          header = ({
            layout,
            options
          }) => {
            var _options$headerLeft;

            return /*#__PURE__*/React.createElement(Header, _extends({}, options, {
              layout: layout,
              title: getHeaderTitle(options, route.name),
              headerLeft: (_options$headerLeft = options.headerLeft) !== null && _options$headerLeft !== void 0 ? _options$headerLeft : props => /*#__PURE__*/React.createElement(DrawerToggleButton, props)
            }));
          }
        } = descriptor.options;
        return /*#__PURE__*/React.createElement(ScreenFallback, {
          key: route.key,
          style: [StyleSheet.absoluteFill, {
            opacity: isFocused ? 1 : 0
          }],
          visible: isFocused,
          enabled: detachInactiveScreens
        }, /*#__PURE__*/React.createElement(Screen, {
          route: descriptor.route,
          navigation: descriptor.navigation,
          headerShown: descriptor.options.headerShown,
          headerStatusBarHeight: descriptor.options.headerStatusBarHeight,
          header: header({
            layout: dimensions,
            route: descriptor.route,
            navigation: descriptor.navigation,
            options: descriptor.options
          })
        }, descriptor.render()));
      }))
    );
  };

  return /*#__PURE__*/React.createElement(DrawerStatusContext.Provider, {
    value: drawerStatus
  }, /*#__PURE__*/React.createElement(Drawer, {
    open: drawerStatus !== 'closed',
    gestureEnabled: gestureEnabled,
    swipeEnabled: swipeEnabled,
    onOpen: handleDrawerOpen,
    onClose: handleDrawerClose,
    gestureHandlerProps: gestureHandlerProps,
    drawerType: drawerType,
    drawerPosition: drawerPosition,
    sceneContainerStyle: [{
      backgroundColor: colors.background
    }, sceneContainerStyle],
    drawerStyle: [{
      width: getDefaultDrawerWidth(dimensions),
      backgroundColor: colors.card
    }, drawerType === 'permanent' && (drawerPosition === 'left' ? {
      borderRightColor: colors.border,
      borderRightWidth: StyleSheet.hairlineWidth
    } : {
      borderLeftColor: colors.border,
      borderLeftWidth: StyleSheet.hairlineWidth
    }), drawerStyle],
    overlayStyle: {
      backgroundColor: overlayColor
    },
    swipeEdgeWidth: swipeEdgeWidth,
    swipeDistanceThreshold: swipeMinDistance,
    hideStatusBarOnOpen: drawerHideStatusBarOnOpen,
    statusBarAnimation: drawerStatusBarAnimation,
    renderDrawerContent: renderDrawerContent,
    renderSceneContent: renderSceneContent,
    keyboardDismissMode: keyboardDismissMode,
    dimensions: dimensions
  }));
}

export default function DrawerView({
  navigation,
  ...rest
}) {
  return /*#__PURE__*/React.createElement(NavigationHelpersContext.Provider, {
    value: navigation
  }, /*#__PURE__*/React.createElement(SafeAreaProviderCompat, null, /*#__PURE__*/React.createElement(GestureHandlerWrapper, {
    style: styles.content
  }, /*#__PURE__*/React.createElement(DrawerViewBase, _extends({
    navigation: navigation
  }, rest)))));
}
const styles = StyleSheet.create({
  content: {
    flex: 1
  }
});
//# sourceMappingURL=DrawerView.js.map