{"version":3,"sources":["DrawerView.tsx"],"names":["React","View","StyleSheet","I18nManager","Platform","BackHandler","ScreenContainer","useSafeAreaFrame","NavigationHelpersContext","DrawerActions","useTheme","Header","Screen","SafeAreaProviderCompat","getHeaderTitle","GestureHandlerRootView","ScreenFallback","DrawerToggleButton","DrawerContent","Drawer","DrawerStatusContext","DrawerPositionContext","getDrawerStatusFromState","getDefaultDrawerWidth","height","width","smallerAxisSize","Math","min","isLandscape","isTablet","appBarHeight","OS","maxWidth","GestureHandlerWrapper","DrawerViewBase","state","navigation","descriptors","drawerContent","props","detachInactiveScreens","focusedRouteKey","routes","index","key","drawerHideStatusBarOnOpen","drawerPosition","isRTL","drawerStatusBarAnimation","drawerStyle","drawerType","select","ios","default","gestureEnabled","gestureHandlerProps","keyboardDismissMode","overlayColor","sceneContainerStyle","swipeEdgeWidth","swipeEnabled","swipeMinDistance","options","loaded","setLoaded","useState","includes","dimensions","colors","drawerStatus","handleDrawerOpen","useCallback","dispatch","openDrawer","target","handleDrawerClose","closeDrawer","useEffect","subscription","addEventListener","remove","renderDrawerContent","progress","renderSceneContent","styles","content","map","route","descriptor","lazy","unmountOnBlur","isFocused","header","layout","name","headerLeft","absoluteFill","opacity","headerShown","headerStatusBarHeight","render","backgroundColor","background","card","borderRightColor","border","borderRightWidth","hairlineWidth","borderLeftColor","borderLeftWidth","DrawerView","rest","create","flex"],"mappings":"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","sourcesContent":["import * as React from 'react';\nimport {\n  View,\n  StyleSheet,\n  I18nManager,\n  Platform,\n  BackHandler,\n  NativeEventSubscription,\n} from 'react-native';\nimport { ScreenContainer } from 'react-native-screens';\nimport { useSafeAreaFrame } from 'react-native-safe-area-context';\nimport {\n  NavigationHelpersContext,\n  DrawerNavigationState,\n  DrawerActions,\n  useTheme,\n  ParamListBase,\n} from '@react-navigation/native';\nimport {\n  Header,\n  Screen,\n  SafeAreaProviderCompat,\n  getHeaderTitle,\n} from '@react-navigation/elements';\n\nimport { GestureHandlerRootView } from './GestureHandler';\nimport ScreenFallback from './ScreenFallback';\nimport DrawerToggleButton from './DrawerToggleButton';\nimport DrawerContent from './DrawerContent';\nimport Drawer from './Drawer';\nimport DrawerStatusContext from '../utils/DrawerStatusContext';\nimport DrawerPositionContext from '../utils/DrawerPositionContext';\nimport getDrawerStatusFromState from '../utils/getDrawerStatusFromState';\nimport type {\n  DrawerDescriptorMap,\n  DrawerNavigationConfig,\n  DrawerNavigationHelpers,\n  DrawerContentComponentProps,\n  DrawerHeaderProps,\n  DrawerNavigationProp,\n} from '../types';\n\ntype Props = DrawerNavigationConfig & {\n  state: DrawerNavigationState<ParamListBase>;\n  navigation: DrawerNavigationHelpers;\n  descriptors: DrawerDescriptorMap;\n};\n\nconst getDefaultDrawerWidth = ({\n  height,\n  width,\n}: {\n  height: number;\n  width: number;\n}) => {\n  /*\n   * Default drawer width is screen width - header height\n   * with a max width of 280 on mobile and 320 on tablet\n   * https://material.io/components/navigation-drawer\n   */\n  const smallerAxisSize = Math.min(height, width);\n  const isLandscape = width > height;\n  const isTablet = smallerAxisSize >= 600;\n  const appBarHeight = Platform.OS === 'ios' ? (isLandscape ? 32 : 44) : 56;\n  const maxWidth = isTablet ? 320 : 280;\n\n  return Math.min(smallerAxisSize - appBarHeight, maxWidth);\n};\n\nconst GestureHandlerWrapper = GestureHandlerRootView ?? View;\n\nfunction DrawerViewBase({\n  state,\n  navigation,\n  descriptors,\n  drawerContent = (props: DrawerContentComponentProps) => (\n    <DrawerContent {...props} />\n  ),\n  detachInactiveScreens = true,\n}: Props) {\n  const focusedRouteKey = state.routes[state.index].key;\n  const {\n    drawerHideStatusBarOnOpen = false,\n    drawerPosition = I18nManager.isRTL ? 'right' : 'left',\n    drawerStatusBarAnimation = 'slide',\n    drawerStyle,\n    drawerType = Platform.select({ ios: 'slide', default: 'front' }),\n    gestureEnabled,\n    gestureHandlerProps,\n    keyboardDismissMode = 'on-drag',\n    overlayColor = 'rgba(0, 0, 0, 0.5)',\n    sceneContainerStyle,\n    swipeEdgeWidth,\n    swipeEnabled,\n    swipeMinDistance,\n  } = descriptors[focusedRouteKey].options;\n\n  const [loaded, setLoaded] = React.useState([focusedRouteKey]);\n\n  if (!loaded.includes(focusedRouteKey)) {\n    setLoaded([...loaded, focusedRouteKey]);\n  }\n\n  const dimensions = useSafeAreaFrame();\n\n  const { colors } = useTheme();\n\n  const drawerStatus = getDrawerStatusFromState(state);\n\n  const handleDrawerOpen = React.useCallback(() => {\n    navigation.dispatch({\n      ...DrawerActions.openDrawer(),\n      target: state.key,\n    });\n  }, [navigation, state.key]);\n\n  const handleDrawerClose = React.useCallback(() => {\n    navigation.dispatch({\n      ...DrawerActions.closeDrawer(),\n      target: state.key,\n    });\n  }, [navigation, state.key]);\n\n  React.useEffect(() => {\n    let subscription: NativeEventSubscription | undefined;\n\n    if (drawerStatus === 'open') {\n      // We only add the subscription when drawer opens\n      // This way we can make sure that the subscription is added as late as possible\n      // This will make sure that our handler will run first when back button is pressed\n      subscription = BackHandler.addEventListener('hardwareBackPress', () => {\n        handleDrawerClose();\n\n        return true;\n      });\n    }\n\n    return () => subscription?.remove();\n  }, [handleDrawerClose, drawerStatus, navigation, state.key]);\n\n  const renderDrawerContent = ({ progress }: any) => {\n    return (\n      <DrawerPositionContext.Provider value={drawerPosition}>\n        {drawerContent({\n          progress: progress,\n          state: state,\n          navigation: navigation,\n          descriptors: descriptors,\n        })}\n      </DrawerPositionContext.Provider>\n    );\n  };\n\n  const renderSceneContent = () => {\n    return (\n      // @ts-ignore\n      <ScreenContainer enabled={detachInactiveScreens} style={styles.content}>\n        {state.routes.map((route, index) => {\n          const descriptor = descriptors[route.key];\n          const { lazy = true, unmountOnBlur } = descriptor.options;\n          const isFocused = state.index === index;\n\n          if (unmountOnBlur && !isFocused) {\n            return null;\n          }\n\n          if (lazy && !loaded.includes(route.key) && !isFocused) {\n            // Don't render a lazy screen if we've never navigated to it\n            return null;\n          }\n\n          const {\n            header = ({ layout, options }: DrawerHeaderProps) => (\n              <Header\n                {...options}\n                layout={layout}\n                title={getHeaderTitle(options, route.name)}\n                headerLeft={\n                  options.headerLeft ??\n                  ((props) => <DrawerToggleButton {...props} />)\n                }\n              />\n            ),\n          } = descriptor.options;\n\n          return (\n            <ScreenFallback\n              key={route.key}\n              style={[StyleSheet.absoluteFill, { opacity: isFocused ? 1 : 0 }]}\n              visible={isFocused}\n              enabled={detachInactiveScreens}\n            >\n              <Screen\n                route={descriptor.route}\n                navigation={descriptor.navigation}\n                headerShown={descriptor.options.headerShown}\n                headerStatusBarHeight={descriptor.options.headerStatusBarHeight}\n                header={header({\n                  layout: dimensions,\n                  route: descriptor.route,\n                  navigation: descriptor.navigation as DrawerNavigationProp<ParamListBase>,\n                  options: descriptor.options,\n                })}\n              >\n                {descriptor.render()}\n              </Screen>\n            </ScreenFallback>\n          );\n        })}\n      </ScreenContainer>\n    );\n  };\n\n  return (\n    <DrawerStatusContext.Provider value={drawerStatus}>\n      <Drawer\n        open={drawerStatus !== 'closed'}\n        gestureEnabled={gestureEnabled}\n        swipeEnabled={swipeEnabled}\n        onOpen={handleDrawerOpen}\n        onClose={handleDrawerClose}\n        gestureHandlerProps={gestureHandlerProps}\n        drawerType={drawerType}\n        drawerPosition={drawerPosition}\n        sceneContainerStyle={[\n          { backgroundColor: colors.background },\n          sceneContainerStyle,\n        ]}\n        drawerStyle={[\n          {\n            width: getDefaultDrawerWidth(dimensions),\n            backgroundColor: colors.card,\n          },\n          drawerType === 'permanent' &&\n            (drawerPosition === 'left'\n              ? {\n                  borderRightColor: colors.border,\n                  borderRightWidth: StyleSheet.hairlineWidth,\n                }\n              : {\n                  borderLeftColor: colors.border,\n                  borderLeftWidth: StyleSheet.hairlineWidth,\n                }),\n          drawerStyle,\n        ]}\n        overlayStyle={{ backgroundColor: overlayColor }}\n        swipeEdgeWidth={swipeEdgeWidth}\n        swipeDistanceThreshold={swipeMinDistance}\n        hideStatusBarOnOpen={drawerHideStatusBarOnOpen}\n        statusBarAnimation={drawerStatusBarAnimation}\n        renderDrawerContent={renderDrawerContent}\n        renderSceneContent={renderSceneContent}\n        keyboardDismissMode={keyboardDismissMode}\n        dimensions={dimensions}\n      />\n    </DrawerStatusContext.Provider>\n  );\n}\n\nexport default function DrawerView({ navigation, ...rest }: Props) {\n  return (\n    <NavigationHelpersContext.Provider value={navigation}>\n      <SafeAreaProviderCompat>\n        <GestureHandlerWrapper style={styles.content}>\n          <DrawerViewBase navigation={navigation} {...rest} />\n        </GestureHandlerWrapper>\n      </SafeAreaProviderCompat>\n    </NavigationHelpersContext.Provider>\n  );\n}\n\nconst styles = StyleSheet.create({\n  content: {\n    flex: 1,\n  },\n});\n"]}