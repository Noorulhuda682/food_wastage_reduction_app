{"version":3,"sources":["Screen.tsx"],"names":["Screen","props","dimensions","insets","isParentHeaderShown","React","useContext","HeaderShownContext","parentHeaderHeight","HeaderHeightContext","header","headerShown","headerStatusBarHeight","top","children","navigation","route","headerHeight","setHeaderHeight","useState","styles","container","content","e","height","nativeEvent","layout","StyleSheet","create","flex","flexDirection"],"mappings":";;;;;;;AAAA;;AACA;;AACA;;AAIA;;AAQA;;AACA;;AACA;;;;;;;;AAWe,SAASA,MAAT,CAAgBC,KAAhB,EAA8B;AAC3C,QAAMC,UAAU,GAAG,mDAAnB;AACA,QAAMC,MAAM,GAAG,oDAAf;AAEA,QAAMC,mBAAmB,GAAGC,KAAK,CAACC,UAAN,CAAiBC,2BAAjB,CAA5B;AACA,QAAMC,kBAAkB,GAAGH,KAAK,CAACC,UAAN,CAAiBG,4BAAjB,CAA3B;AAEA,QAAM;AACJC,IAAAA,MADI;AAEJC,IAAAA,WAAW,GAAG,IAFV;AAGJC,IAAAA,qBAAqB,GAAGR,mBAAmB,GAAG,CAAH,GAAOD,MAAM,CAACU,GAHrD;AAIJC,IAAAA,QAJI;AAKJC,IAAAA,UALI;AAMJC,IAAAA;AANI,MAOFf,KAPJ;AASA,QAAM,CAACgB,YAAD,EAAeC,eAAf,IAAkCb,KAAK,CAACc,QAAN,CAAe,MACrD,qCAAuBjB,UAAvB,EAAmCU,qBAAnC,CADsC,CAAxC;AAIA,sBACE,oBAAC,iBAAD;AAAM,IAAA,KAAK,EAAEQ,MAAM,CAACC;AAApB,kBACE,oBAAC,iBAAD;AAAM,IAAA,KAAK,EAAED,MAAM,CAACE;AAApB,kBACE,oBAAC,2BAAD,CAAoB,QAApB;AACE,IAAA,KAAK,EAAElB,mBAAmB,IAAIO,WAAW,KAAK;AADhD,kBAGE,oBAAC,4BAAD,CAAqB,QAArB;AACE,IAAA,KAAK,EAAEA,WAAW,GAAGM,YAAH,GAAkBT;AADtC,KAGGM,QAHH,CAHF,CADF,CADF,EAYGH,WAAW,gBACV,oBAAC,yBAAD,CAAmB,QAAnB;AAA4B,IAAA,KAAK,EAAEI;AAAnC,kBACE,oBAAC,8BAAD,CAAwB,QAAxB;AAAiC,IAAA,KAAK,EAAEC;AAAxC,kBACE,oBAAC,iBAAD;AACE,IAAA,QAAQ,EAAGO,CAAD,IAAO;AACf,YAAM;AAAEC,QAAAA;AAAF,UAAaD,CAAC,CAACE,WAAF,CAAcC,MAAjC;AAEAR,MAAAA,eAAe,CAACM,MAAD,CAAf;AACD;AALH,KAOGd,MAPH,CADF,CADF,CADU,GAcR,IA1BN,CADF;AA8BD;;AAED,MAAMU,MAAM,GAAGO,wBAAWC,MAAX,CAAkB;AAC/BP,EAAAA,SAAS,EAAE;AACTQ,IAAAA,IAAI,EAAE,CADG;AAETC,IAAAA,aAAa,EAAE;AAFN,GADoB;AAK/B;AACAR,EAAAA,OAAO,EAAE;AACPO,IAAAA,IAAI,EAAE;AADC;AANsB,CAAlB,CAAf","sourcesContent":["import * as React from 'react';\nimport { View, StyleSheet } from 'react-native';\nimport {\n  useSafeAreaFrame,\n  useSafeAreaInsets,\n} from 'react-native-safe-area-context';\nimport {\n  NavigationContext,\n  NavigationRouteContext,\n  NavigationProp,\n  RouteProp,\n  ParamListBase,\n} from '@react-navigation/native';\n\nimport HeaderShownContext from './Header/HeaderShownContext';\nimport HeaderHeightContext from './Header/HeaderHeightContext';\nimport getDefaultHeaderHeight from './Header/getDefaultHeaderHeight';\n\ntype Props = {\n  navigation: NavigationProp<ParamListBase>;\n  route: RouteProp<ParamListBase, string>;\n  header: React.ReactNode;\n  headerShown?: boolean;\n  headerStatusBarHeight?: number;\n  children: React.ReactNode;\n};\n\nexport default function Screen(props: Props) {\n  const dimensions = useSafeAreaFrame();\n  const insets = useSafeAreaInsets();\n\n  const isParentHeaderShown = React.useContext(HeaderShownContext);\n  const parentHeaderHeight = React.useContext(HeaderHeightContext);\n\n  const {\n    header,\n    headerShown = true,\n    headerStatusBarHeight = isParentHeaderShown ? 0 : insets.top,\n    children,\n    navigation,\n    route,\n  } = props;\n\n  const [headerHeight, setHeaderHeight] = React.useState(() =>\n    getDefaultHeaderHeight(dimensions, headerStatusBarHeight)\n  );\n\n  return (\n    <View style={styles.container}>\n      <View style={styles.content}>\n        <HeaderShownContext.Provider\n          value={isParentHeaderShown || headerShown !== false}\n        >\n          <HeaderHeightContext.Provider\n            value={headerShown ? headerHeight : parentHeaderHeight}\n          >\n            {children}\n          </HeaderHeightContext.Provider>\n        </HeaderShownContext.Provider>\n      </View>\n      {headerShown ? (\n        <NavigationContext.Provider value={navigation}>\n          <NavigationRouteContext.Provider value={route}>\n            <View\n              onLayout={(e) => {\n                const { height } = e.nativeEvent.layout;\n\n                setHeaderHeight(height);\n              }}\n            >\n              {header}\n            </View>\n          </NavigationRouteContext.Provider>\n        </NavigationContext.Provider>\n      ) : null}\n    </View>\n  );\n}\n\nconst styles = StyleSheet.create({\n  container: {\n    flex: 1,\n    flexDirection: 'column-reverse',\n  },\n  // This is necessary to avoid applying 'column-reverse' to screen content\n  content: {\n    flex: 1,\n  },\n});\n"]}