function _extends() { _extends = Object.assign || function (target) { for (var i = 1; i < arguments.length; i++) { var source = arguments[i]; for (var key in source) { if (Object.prototype.hasOwnProperty.call(source, key)) { target[key] = source[key]; } } } return target; }; return _extends.apply(this, arguments); }

import * as React from 'react';
import { Platform, Pressable } from 'react-native';
import { useTheme } from '@react-navigation/native';
const ANDROID_VERSION_LOLLIPOP = 21;
const ANDROID_SUPPORTS_RIPPLE = Platform.OS === 'android' && Platform.Version >= ANDROID_VERSION_LOLLIPOP;
/**
 * PlatformPressable provides an abstraction on top of Pressable to handle platform differences.
 */

export default function PlatformPressable({
  android_ripple,
  pressColor,
  pressOpacity,
  style,
  ...rest
}) {
  const {
    dark
  } = useTheme();
  return /*#__PURE__*/React.createElement(Pressable, _extends({
    android_ripple: ANDROID_SUPPORTS_RIPPLE ? {
      color: pressColor !== undefined ? pressColor : dark ? 'rgba(255, 255, 255, .32)' : 'rgba(0, 0, 0, .32)',
      ...android_ripple
    } : undefined,
    style: ({
      pressed
    }) => [{
      opacity: pressed && !ANDROID_SUPPORTS_RIPPLE ? pressOpacity : 1
    }, typeof style === 'function' ? style({
      pressed
    }) : style]
  }, rest));
}
//# sourceMappingURL=PlatformPressable.js.map