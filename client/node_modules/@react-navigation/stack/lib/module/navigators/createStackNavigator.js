function _extends() { _extends = Object.assign || function (target) { for (var i = 1; i < arguments.length; i++) { var source = arguments[i]; for (var key in source) { if (Object.prototype.hasOwnProperty.call(source, key)) { target[key] = source[key]; } } } return target; }; return _extends.apply(this, arguments); }

import * as React from 'react';
import { Platform } from 'react-native';
import { useNavigationBuilder, createNavigatorFactory, StackRouter, StackActions } from '@react-navigation/native';
import warnOnce from 'warn-once';
import StackView from '../views/Stack/StackView';

function StackNavigator({
  initialRouteName,
  children,
  screenOptions,
  ...rest
}) {
  // @ts-expect-error: headerMode='none' is deprecated
  const headerMode = rest.headerMode;
  warnOnce(headerMode === 'none', "Stack Navigator: 'headerMode=\"none\"' is deprecated. Use 'headerShown: false' in 'screenOptions' instead.");
  warnOnce(headerMode && headerMode !== 'none', "Stack Navigator: 'headerMode' is moved to 'options'. Moved it to 'screenOptions' to keep current behavior.");
  const {
    state,
    descriptors,
    navigation
  } = useNavigationBuilder(StackRouter, {
    initialRouteName,
    children,
    screenOptions,
    defaultScreenOptions: ({
      options
    }) => ({
      headerShown: headerMode ? headerMode !== 'none' : true,
      headerMode: headerMode && headerMode !== 'none' ? headerMode : rest.mode !== 'modal' && Platform.OS === 'ios' && options.header === undefined ? 'float' : 'screen',
      gestureEnabled: Platform.OS === 'ios',
      animationEnabled: Platform.OS !== 'web' && Platform.OS !== 'windows' && Platform.OS !== 'macos'
    })
  });
  React.useEffect(() => {
    var _navigation$addListen;

    return (_navigation$addListen = navigation.addListener) === null || _navigation$addListen === void 0 ? void 0 : _navigation$addListen.call(navigation, 'tabPress', e => {
      const isFocused = navigation.isFocused(); // Run the operation in the next frame so we're sure all listeners have been run
      // This is necessary to know if preventDefault() has been called

      requestAnimationFrame(() => {
        if (state.index > 0 && isFocused && !e.defaultPrevented) {
          // When user taps on already focused tab and we're inside the tab,
          // reset the stack to replicate native behaviour
          navigation.dispatch({ ...StackActions.popToTop(),
            target: state.key
          });
        }
      });
    });
  }, [navigation, state.index, state.key]);
  return /*#__PURE__*/React.createElement(StackView, _extends({}, rest, {
    state: state,
    descriptors: descriptors,
    navigation: navigation
  }));
}

export default createNavigatorFactory(StackNavigator);
//# sourceMappingURL=createStackNavigator.js.map