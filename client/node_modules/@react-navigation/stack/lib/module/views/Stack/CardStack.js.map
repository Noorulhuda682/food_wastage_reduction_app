{"version":3,"sources":["CardStack.tsx"],"names":["React","Animated","StyleSheet","Platform","Color","getDefaultHeaderHeight","SafeAreaProviderCompat","Background","MaybeScreenContainer","MaybeScreen","shouldUseActivityState","CardContainer","DefaultTransition","ModalTransition","forNoAnimation","forNoAnimationCard","getDistanceForDirection","EPSILON","STATE_INACTIVE","STATE_TRANSITIONING_OR_BELOW_TOP","STATE_ON_TOP","FALLBACK_DESCRIPTOR","Object","freeze","options","getHeaderHeights","routes","insets","isParentHeaderShown","descriptors","layout","previous","reduce","acc","curr","key","style","flatten","headerStyle","height","headerStatusBarHeight","top","getDistanceFromOptions","mode","descriptor","gestureDirection","getProgressFromGesture","gesture","distance","width","Math","max","interpolate","inputRange","outputRange","CardStack","Component","getDerivedStateFromProps","props","state","gestures","animationEnabled","Value","openingRouteKeys","includes","scenes","map","route","index","self","previousRoute","nextRoute","oldScene","currentGesture","previousGesture","undefined","nextGesture","nextDescriptor","previousDescriptor","scene","progress","current","next","__memo","every","it","i","headerHeights","constructor","e","nativeEvent","setState","previousHeight","getPreviousRoute","previousScene","find","initialMetrics","frame","render","closingRouteKeys","onOpenRoute","onCloseRoute","getGesturesEnabled","renderHeader","renderScene","onTransitionStart","onTransitionEnd","onPageChangeStart","onPageChangeConfirm","onPageChangeCancel","onGestureStart","onGestureEnd","onGestureCancel","detachInactiveScreens","OS","focusedRoute","focusedDescriptor","focusedOptions","focusedHeaderHeight","defaultTransitionPreset","activeScreensLimit","length","detachPreviousScreen","isFloatHeaderAbsolute","slice","some","headerMode","headerTransparent","headerShown","floatingHeader","getPreviousScene","getFocusedRoute","onContentHeightChange","handleHeaderLayout","styleInterpolator","headerStyleInterpolator","styles","floating","absolute","container","handleLayout","focused","isScreenActive","sceneForActivity","outputValue","extrapolate","headerTintColor","cardShadowEnabled","cardOverlayEnabled","cardOverlay","cardStyle","gestureResponseDistance","gestureVelocityImpact","transitionSpec","cardStyleInterpolator","transitionConfig","nextScene","safeAreaInsetTop","safeAreaInsetRight","right","safeAreaInsetBottom","bottom","safeAreaInsetLeft","left","headerHeight","backgroundColor","headerBackgroundColor","headerDarkContent","isDark","absoluteFill","create","flex","position","zIndex"],"mappings":"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","sourcesContent":["import * as React from 'react';\nimport {\n  Animated,\n  StyleSheet,\n  LayoutChangeEvent,\n  Platform,\n} from 'react-native';\nimport type { EdgeInsets } from 'react-native-safe-area-context';\nimport Color from 'color';\nimport type {\n  ParamListBase,\n  Route,\n  StackNavigationState,\n} from '@react-navigation/native';\nimport {\n  getDefaultHeaderHeight,\n  SafeAreaProviderCompat,\n  Background,\n} from '@react-navigation/elements';\n\nimport {\n  MaybeScreenContainer,\n  MaybeScreen,\n  shouldUseActivityState,\n} from '../Screens';\nimport type { Props as HeaderContainerProps } from '../Header/HeaderContainer';\nimport CardContainer from './CardContainer';\nimport {\n  DefaultTransition,\n  ModalTransition,\n} from '../../TransitionConfigs/TransitionPresets';\nimport { forNoAnimation as forNoAnimationCard } from '../../TransitionConfigs/CardStyleInterpolators';\nimport getDistanceForDirection from '../../utils/getDistanceForDirection';\nimport type {\n  Layout,\n  StackCardMode,\n  StackDescriptorMap,\n  StackNavigationOptions,\n  StackDescriptor,\n  Scene,\n} from '../../types';\n\ntype GestureValues = {\n  [key: string]: Animated.Value;\n};\n\ntype Props = {\n  mode: StackCardMode;\n  insets: EdgeInsets;\n  state: StackNavigationState<ParamListBase>;\n  descriptors: StackDescriptorMap;\n  routes: Route<string>[];\n  openingRouteKeys: string[];\n  closingRouteKeys: string[];\n  onOpenRoute: (props: { route: Route<string> }) => void;\n  onCloseRoute: (props: { route: Route<string> }) => void;\n  getPreviousRoute: (props: {\n    route: Route<string>;\n  }) => Route<string> | undefined;\n  getGesturesEnabled: (props: { route: Route<string> }) => boolean;\n  renderHeader: (props: HeaderContainerProps) => React.ReactNode;\n  renderScene: (props: { route: Route<string> }) => React.ReactNode;\n  isParentHeaderShown: boolean;\n  onTransitionStart: (\n    props: { route: Route<string> },\n    closing: boolean\n  ) => void;\n  onTransitionEnd: (props: { route: Route<string> }, closing: boolean) => void;\n  onPageChangeStart?: () => void;\n  onPageChangeConfirm?: (force: boolean) => void;\n  onPageChangeCancel?: () => void;\n  onGestureStart?: (props: { route: Route<string> }) => void;\n  onGestureEnd?: (props: { route: Route<string> }) => void;\n  onGestureCancel?: (props: { route: Route<string> }) => void;\n  detachInactiveScreens?: boolean;\n};\n\ntype State = {\n  routes: Route<string>[];\n  descriptors: StackDescriptorMap;\n  scenes: Scene[];\n  gestures: GestureValues;\n  layout: Layout;\n  headerHeights: Record<string, number>;\n};\n\nconst EPSILON = 0.01;\n\nconst STATE_INACTIVE = 0;\nconst STATE_TRANSITIONING_OR_BELOW_TOP = 1;\nconst STATE_ON_TOP = 2;\n\nconst FALLBACK_DESCRIPTOR = Object.freeze({ options: {} });\n\nconst getHeaderHeights = (\n  routes: Route<string>[],\n  insets: EdgeInsets,\n  isParentHeaderShown: boolean,\n  descriptors: StackDescriptorMap,\n  layout: Layout,\n  previous: Record<string, number>\n) => {\n  return routes.reduce<Record<string, number>>((acc, curr) => {\n    const { options = {} } = descriptors[curr.key] || {};\n    const style: any = StyleSheet.flatten(options.headerStyle || {});\n\n    const height =\n      typeof style.height === 'number' ? style.height : previous[curr.key];\n\n    const {\n      headerStatusBarHeight = isParentHeaderShown ? 0 : insets.top,\n    } = options;\n\n    acc[curr.key] =\n      typeof height === 'number'\n        ? height\n        : getDefaultHeaderHeight(layout, headerStatusBarHeight);\n\n    return acc;\n  }, {});\n};\n\nconst getDistanceFromOptions = (\n  mode: StackCardMode,\n  layout: Layout,\n  descriptor?: StackDescriptor\n) => {\n  const {\n    gestureDirection = mode === 'modal'\n      ? ModalTransition.gestureDirection\n      : DefaultTransition.gestureDirection,\n  } = descriptor?.options || {};\n\n  return getDistanceForDirection(layout, gestureDirection);\n};\n\nconst getProgressFromGesture = (\n  mode: StackCardMode,\n  gesture: Animated.Value,\n  layout: Layout,\n  descriptor?: StackDescriptor\n) => {\n  const distance = getDistanceFromOptions(\n    mode,\n    {\n      // Make sure that we have a non-zero distance, otherwise there will be incorrect progress\n      // This causes blank screen on web if it was previously inside container with display: none\n      width: Math.max(1, layout.width),\n      height: Math.max(1, layout.height),\n    },\n    descriptor\n  );\n\n  if (distance > 0) {\n    return gesture.interpolate({\n      inputRange: [0, distance],\n      outputRange: [1, 0],\n    });\n  }\n\n  return gesture.interpolate({\n    inputRange: [distance, 0],\n    outputRange: [0, 1],\n  });\n};\n\nexport default class CardStack extends React.Component<Props, State> {\n  static getDerivedStateFromProps(props: Props, state: State) {\n    if (\n      props.routes === state.routes &&\n      props.descriptors === state.descriptors\n    ) {\n      return null;\n    }\n\n    const gestures = props.routes.reduce<GestureValues>((acc, curr) => {\n      const descriptor = props.descriptors[curr.key];\n      const { animationEnabled } = descriptor?.options || {};\n\n      acc[curr.key] =\n        state.gestures[curr.key] ||\n        new Animated.Value(\n          props.openingRouteKeys.includes(curr.key) &&\n          animationEnabled !== false\n            ? getDistanceFromOptions(props.mode, state.layout, descriptor)\n            : 0\n        );\n\n      return acc;\n    }, {});\n\n    return {\n      routes: props.routes,\n      scenes: props.routes.map((route, index, self) => {\n        const previousRoute = self[index - 1];\n        const nextRoute = self[index + 1];\n\n        const oldScene = state.scenes[index];\n\n        const currentGesture = gestures[route.key];\n        const previousGesture = previousRoute\n          ? gestures[previousRoute.key]\n          : undefined;\n        const nextGesture = nextRoute ? gestures[nextRoute.key] : undefined;\n\n        const descriptor =\n          props.descriptors[route.key] ||\n          state.descriptors[route.key] ||\n          (oldScene ? oldScene.descriptor : FALLBACK_DESCRIPTOR);\n\n        const nextDescriptor =\n          props.descriptors[nextRoute?.key] ||\n          state.descriptors[nextRoute?.key];\n\n        const previousDescriptor =\n          props.descriptors[previousRoute?.key] ||\n          state.descriptors[previousRoute?.key];\n\n        const scene = {\n          route,\n          descriptor,\n          progress: {\n            current: getProgressFromGesture(\n              props.mode,\n              currentGesture,\n              state.layout,\n              descriptor\n            ),\n            next: nextGesture\n              ? getProgressFromGesture(\n                  props.mode,\n                  nextGesture,\n                  state.layout,\n                  nextDescriptor\n                )\n              : undefined,\n            previous: previousGesture\n              ? getProgressFromGesture(\n                  props.mode,\n                  previousGesture,\n                  state.layout,\n                  previousDescriptor\n                )\n              : undefined,\n          },\n          __memo: [\n            state.layout,\n            descriptor,\n            nextDescriptor,\n            previousDescriptor,\n            currentGesture,\n            nextGesture,\n            previousGesture,\n          ],\n        };\n\n        if (\n          oldScene &&\n          scene.__memo.every((it, i) => {\n            // @ts-expect-error: we haven't added __memo to the annotation to prevent usage elsewhere\n            return oldScene.__memo[i] === it;\n          })\n        ) {\n          return oldScene;\n        }\n\n        return scene;\n      }),\n      gestures,\n      descriptors: props.descriptors,\n      headerHeights: getHeaderHeights(\n        props.routes,\n        props.insets,\n        props.isParentHeaderShown,\n        state.descriptors,\n        state.layout,\n        state.headerHeights\n      ),\n    };\n  }\n\n  constructor(props: Props) {\n    super(props);\n\n    this.state = {\n      routes: [],\n      scenes: [],\n      gestures: {},\n      layout: SafeAreaProviderCompat.initialMetrics.frame,\n      descriptors: this.props.descriptors,\n      // Used when card's header is null and mode is float to make transition\n      // between screens with headers and those without headers smooth.\n      // This is not a great heuristic here. We don't know synchronously\n      // on mount what the header height is so we have just used the most\n      // common cases here.\n      headerHeights: {},\n    };\n  }\n\n  private handleLayout = (e: LayoutChangeEvent) => {\n    const { height, width } = e.nativeEvent.layout;\n\n    const layout = { width, height };\n\n    this.setState((state, props) => {\n      if (height === state.layout.height && width === state.layout.width) {\n        return null;\n      }\n\n      return {\n        layout,\n        headerHeights: getHeaderHeights(\n          props.routes,\n          props.insets,\n          props.isParentHeaderShown,\n          state.descriptors,\n          layout,\n          state.headerHeights\n        ),\n      };\n    });\n  };\n\n  private handleHeaderLayout = ({\n    route,\n    height,\n  }: {\n    route: Route<string>;\n    height: number;\n  }) => {\n    this.setState(({ headerHeights }) => {\n      const previousHeight = headerHeights[route.key];\n\n      if (previousHeight === height) {\n        return null;\n      }\n\n      return {\n        headerHeights: {\n          ...headerHeights,\n          [route.key]: height,\n        },\n      };\n    });\n  };\n\n  private getFocusedRoute = () => {\n    const { state } = this.props;\n\n    return state.routes[state.index];\n  };\n\n  private getPreviousScene = ({ route }: { route: Route<string> }) => {\n    const { getPreviousRoute } = this.props;\n    const { scenes } = this.state;\n\n    const previousRoute = getPreviousRoute({ route });\n\n    if (previousRoute) {\n      const previousScene = scenes.find(\n        (scene) => scene.descriptor.route.key === previousRoute.key\n      );\n\n      return previousScene;\n    }\n\n    return undefined;\n  };\n\n  render() {\n    const {\n      mode,\n      insets,\n      descriptors,\n      state,\n      routes,\n      closingRouteKeys,\n      onOpenRoute,\n      onCloseRoute,\n      getGesturesEnabled,\n      renderHeader,\n      renderScene,\n      isParentHeaderShown,\n      onTransitionStart,\n      onTransitionEnd,\n      onPageChangeStart,\n      onPageChangeConfirm,\n      onPageChangeCancel,\n      onGestureStart,\n      onGestureEnd,\n      onGestureCancel,\n      // Enable on new versions of `react-native-screens`\n      // On older versions of `react-native-screens`, there's an issue with screens not being responsive to user interaction.\n      detachInactiveScreens = Platform.OS === 'web'\n        ? true\n        : shouldUseActivityState ?? false,\n    } = this.props;\n\n    const { scenes, layout, gestures, headerHeights } = this.state;\n\n    const focusedRoute = state.routes[state.index];\n    const focusedDescriptor = descriptors[focusedRoute.key];\n    const focusedOptions = focusedDescriptor ? focusedDescriptor.options : {};\n    const focusedHeaderHeight = headerHeights[focusedRoute.key];\n\n    let defaultTransitionPreset =\n      mode === 'modal' ? ModalTransition : DefaultTransition;\n\n    let activeScreensLimit = 1;\n\n    for (let i = scenes.length - 1; i >= 0; i--) {\n      const {\n        // By default, we don't want to detach the previous screen of the active one for modals\n        detachPreviousScreen = mode === 'modal'\n          ? i !== scenes.length - 1\n          : true,\n      } = scenes[i].descriptor.options;\n\n      if (detachPreviousScreen === false) {\n        activeScreensLimit++;\n      } else {\n        break;\n      }\n    }\n\n    const isFloatHeaderAbsolute = this.state.scenes.slice(-2).some((scene) => {\n      const options = scene.descriptor.options ?? {};\n      const {\n        headerMode = 'screen',\n        headerTransparent,\n        headerShown = true,\n      } = options;\n\n      if (\n        headerTransparent ||\n        headerShown === false ||\n        headerMode === 'screen'\n      ) {\n        return true;\n      }\n\n      return false;\n    });\n\n    const floatingHeader = (\n      <React.Fragment key=\"header\">\n        {renderHeader({\n          mode: 'float',\n          layout,\n          scenes,\n          getPreviousScene: this.getPreviousScene,\n          getFocusedRoute: this.getFocusedRoute,\n          onContentHeightChange: this.handleHeaderLayout,\n          styleInterpolator:\n            focusedOptions.headerStyleInterpolator !== undefined\n              ? focusedOptions.headerStyleInterpolator\n              : defaultTransitionPreset.headerStyleInterpolator,\n          style: [\n            styles.floating,\n            isFloatHeaderAbsolute && [\n              // Without this, the header buttons won't be touchable on Android when headerTransparent: true\n              { height: focusedHeaderHeight },\n              styles.absolute,\n            ],\n          ],\n        })}\n      </React.Fragment>\n    );\n\n    return (\n      <Background>\n        {isFloatHeaderAbsolute ? null : floatingHeader}\n        <MaybeScreenContainer\n          enabled={detachInactiveScreens}\n          style={styles.container}\n          onLayout={this.handleLayout}\n        >\n          {routes.map((route, index, self) => {\n            const focused = focusedRoute.key === route.key;\n            const gesture = gestures[route.key];\n            const scene = scenes[index];\n\n            // For the screens that shouldn't be active, the value is 0\n            // For those that should be active, but are not the top screen, the value is 1\n            // For those on top of the stack and with interaction enabled, the value is 2\n            // For the old implementation, it stays the same it was\n            let isScreenActive: Animated.AnimatedInterpolation | 2 | 1 | 0 = 1;\n\n            if (shouldUseActivityState || Platform.OS === 'web') {\n              if (index < self.length - activeScreensLimit - 1) {\n                // screen should be inactive because it is too deep in the stack\n                isScreenActive = STATE_INACTIVE;\n              } else {\n                const sceneForActivity = scenes[self.length - 1];\n                const outputValue =\n                  index === self.length - 1\n                    ? STATE_ON_TOP // the screen is on top after the transition\n                    : index >= self.length - activeScreensLimit\n                    ? STATE_TRANSITIONING_OR_BELOW_TOP // the screen should stay active after the transition, it is not on top but is in activeLimit\n                    : STATE_INACTIVE; // the screen should be active only during the transition, it is at the edge of activeLimit\n                isScreenActive = sceneForActivity\n                  ? sceneForActivity.progress.current.interpolate({\n                      inputRange: [0, 1 - EPSILON, 1],\n                      outputRange: [1, 1, outputValue],\n                      extrapolate: 'clamp',\n                    })\n                  : STATE_TRANSITIONING_OR_BELOW_TOP;\n              }\n            } else {\n              isScreenActive = scene.progress.next\n                ? scene.progress.next.interpolate({\n                    inputRange: [0, 1 - EPSILON, 1],\n                    outputRange: [1, 1, 0],\n                    extrapolate: 'clamp',\n                  })\n                : 1;\n            }\n\n            const {\n              headerShown = true,\n              headerMode = 'screen',\n              headerTransparent,\n              headerStyle,\n              headerTintColor,\n              cardShadowEnabled,\n              cardOverlayEnabled = Platform.OS !== 'ios' || mode === 'modal',\n              cardOverlay,\n              cardStyle,\n              animationEnabled,\n              gestureResponseDistance,\n              gestureVelocityImpact,\n              gestureDirection = defaultTransitionPreset.gestureDirection,\n              transitionSpec = defaultTransitionPreset.transitionSpec,\n              cardStyleInterpolator = animationEnabled === false\n                ? forNoAnimationCard\n                : defaultTransitionPreset.cardStyleInterpolator,\n              headerStyleInterpolator = defaultTransitionPreset.headerStyleInterpolator,\n            } = scene.descriptor\n              ? scene.descriptor.options\n              : ({} as StackNavigationOptions);\n\n            let transitionConfig = {\n              gestureDirection,\n              transitionSpec,\n              cardStyleInterpolator,\n              headerStyleInterpolator,\n            };\n\n            // When a screen is not the last, it should use next screen's transition config\n            // Many transitions also animate the previous screen, so using 2 different transitions doesn't look right\n            // For example combining a slide and a modal transition would look wrong otherwise\n            // With this approach, combining different transition styles in the same navigator mostly looks right\n            // This will still be broken when 2 transitions have different idle state (e.g. modal presentation),\n            // but majority of the transitions look alright\n            if (index !== self.length - 1) {\n              const nextScene = scenes[index + 1];\n\n              if (nextScene) {\n                const {\n                  animationEnabled,\n                  gestureDirection = defaultTransitionPreset.gestureDirection,\n                  transitionSpec = defaultTransitionPreset.transitionSpec,\n                  cardStyleInterpolator = animationEnabled === false\n                    ? forNoAnimationCard\n                    : defaultTransitionPreset.cardStyleInterpolator,\n                  headerStyleInterpolator = defaultTransitionPreset.headerStyleInterpolator,\n                } = nextScene.descriptor\n                  ? nextScene.descriptor.options\n                  : ({} as StackNavigationOptions);\n\n                transitionConfig = {\n                  gestureDirection,\n                  transitionSpec,\n                  cardStyleInterpolator,\n                  headerStyleInterpolator,\n                };\n              }\n            }\n\n            const safeAreaInsetTop = insets.top;\n            const safeAreaInsetRight = insets.right;\n            const safeAreaInsetBottom = insets.bottom;\n            const safeAreaInsetLeft = insets.left;\n\n            const headerHeight =\n              headerShown !== false ? headerHeights[route.key] : 0;\n\n            const { backgroundColor: headerBackgroundColor } =\n              StyleSheet.flatten(headerStyle) || {};\n\n            let headerDarkContent: boolean | undefined;\n\n            if (headerShown) {\n              if (headerTintColor) {\n                headerDarkContent = Color(headerTintColor).isDark();\n              } else if (typeof headerBackgroundColor === 'string') {\n                headerDarkContent = !Color(headerBackgroundColor).isDark();\n              }\n            }\n\n            return (\n              <MaybeScreen\n                key={route.key}\n                style={StyleSheet.absoluteFill}\n                enabled={detachInactiveScreens}\n                active={isScreenActive}\n                pointerEvents=\"box-none\"\n              >\n                <CardContainer\n                  index={index}\n                  active={index === self.length - 1}\n                  focused={focused}\n                  closing={closingRouteKeys.includes(route.key)}\n                  layout={layout}\n                  gesture={gesture}\n                  scene={scene}\n                  safeAreaInsetTop={safeAreaInsetTop}\n                  safeAreaInsetRight={safeAreaInsetRight}\n                  safeAreaInsetBottom={safeAreaInsetBottom}\n                  safeAreaInsetLeft={safeAreaInsetLeft}\n                  cardOverlay={cardOverlay}\n                  cardOverlayEnabled={cardOverlayEnabled}\n                  cardShadowEnabled={cardShadowEnabled}\n                  cardStyle={cardStyle}\n                  onPageChangeStart={onPageChangeStart}\n                  onPageChangeConfirm={onPageChangeConfirm}\n                  onPageChangeCancel={onPageChangeCancel}\n                  onGestureStart={onGestureStart}\n                  onGestureCancel={onGestureCancel}\n                  onGestureEnd={onGestureEnd}\n                  gestureResponseDistance={gestureResponseDistance}\n                  headerHeight={headerHeight}\n                  isParentHeaderShown={isParentHeaderShown}\n                  onHeaderHeightChange={this.handleHeaderLayout}\n                  getPreviousScene={this.getPreviousScene}\n                  getFocusedRoute={this.getFocusedRoute}\n                  mode={mode}\n                  headerMode={headerMode}\n                  headerShown={headerShown}\n                  headerDarkContent={headerDarkContent}\n                  hasAbsoluteFloatHeader={\n                    isFloatHeaderAbsolute && !headerTransparent\n                  }\n                  renderHeader={renderHeader}\n                  renderScene={renderScene}\n                  onOpenRoute={onOpenRoute}\n                  onCloseRoute={onCloseRoute}\n                  onTransitionStart={onTransitionStart}\n                  onTransitionEnd={onTransitionEnd}\n                  gestureEnabled={index !== 0 && getGesturesEnabled({ route })}\n                  gestureVelocityImpact={gestureVelocityImpact}\n                  {...transitionConfig}\n                />\n              </MaybeScreen>\n            );\n          })}\n        </MaybeScreenContainer>\n        {isFloatHeaderAbsolute ? floatingHeader : null}\n      </Background>\n    );\n  }\n}\n\nconst styles = StyleSheet.create({\n  container: {\n    flex: 1,\n  },\n  absolute: {\n    position: 'absolute',\n    top: 0,\n    left: 0,\n    right: 0,\n  },\n  floating: {\n    zIndex: 1,\n  },\n});\n"]}