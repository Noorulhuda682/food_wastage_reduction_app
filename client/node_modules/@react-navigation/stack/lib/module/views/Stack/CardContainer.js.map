{"version":3,"sources":["CardContainer.tsx"],"names":["React","View","StyleSheet","useTheme","HeaderShownContext","HeaderHeightContext","HeaderBackContext","getHeaderTitle","Card","forModalPresentationIOS","ModalPresentationContext","EPSILON","CardContainer","active","cardOverlay","cardOverlayEnabled","cardShadowEnabled","cardStyle","cardStyleInterpolator","closing","gesture","focused","gestureDirection","gestureEnabled","gestureResponseDistance","gestureVelocityImpact","getPreviousScene","getFocusedRoute","mode","headerDarkContent","headerMode","headerShown","headerStyleInterpolator","hasAbsoluteFloatHeader","headerHeight","onHeaderHeightChange","isParentHeaderShown","index","layout","onCloseRoute","onOpenRoute","onPageChangeCancel","onPageChangeConfirm","onPageChangeStart","onGestureCancel","onGestureEnd","onGestureStart","onTransitionEnd","onTransitionStart","renderHeader","renderScene","safeAreaInsetBottom","safeAreaInsetLeft","safeAreaInsetRight","safeAreaInsetTop","scene","transitionSpec","parentHeaderHeight","useContext","handleOpen","route","descriptor","handleClose","handleGestureBegin","handleGestureCanceled","handleGestureEnd","handleTransition","insets","top","right","bottom","left","colors","pointerEvents","setPointerEvents","useState","useEffect","listener","progress","next","addListener","value","removeListener","isModalPresentation","previousScene","backTitle","options","name","headerBack","useMemo","undefined","title","current","marginTop","backgroundColor","background","overflow","absoluteFill","styles","container","scenes","styleInterpolator","onContentHeightChange","memo","create","flex","flexDirection"],"mappings":"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","sourcesContent":["import * as React from 'react';\nimport { Animated, View, StyleSheet, StyleProp, ViewStyle } from 'react-native';\nimport { Route, useTheme } from '@react-navigation/native';\nimport {\n  HeaderShownContext,\n  HeaderHeightContext,\n  HeaderBackContext,\n  getHeaderTitle,\n} from '@react-navigation/elements';\nimport type { Props as HeaderContainerProps } from '../Header/HeaderContainer';\nimport Card from './Card';\nimport { forModalPresentationIOS } from '../../TransitionConfigs/CardStyleInterpolators';\nimport ModalPresentationContext from '../../utils/ModalPresentationContext';\nimport type {\n  Layout,\n  StackHeaderMode,\n  StackCardMode,\n  TransitionPreset,\n  Scene,\n} from '../../types';\n\ntype Props = TransitionPreset & {\n  index: number;\n  active: boolean;\n  focused: boolean;\n  closing: boolean;\n  layout: Layout;\n  gesture: Animated.Value;\n  scene: Scene;\n  headerDarkContent: boolean | undefined;\n  safeAreaInsetTop: number;\n  safeAreaInsetRight: number;\n  safeAreaInsetBottom: number;\n  safeAreaInsetLeft: number;\n  cardOverlay?: (props: {\n    style: Animated.WithAnimatedValue<StyleProp<ViewStyle>>;\n  }) => React.ReactNode;\n  cardOverlayEnabled: boolean;\n  cardShadowEnabled?: boolean;\n  cardStyle?: StyleProp<ViewStyle>;\n  getPreviousScene: (props: { route: Route<string> }) => Scene | undefined;\n  getFocusedRoute: () => Route<string>;\n  renderHeader: (props: HeaderContainerProps) => React.ReactNode;\n  renderScene: (props: { route: Route<string> }) => React.ReactNode;\n  onOpenRoute: (props: { route: Route<string> }) => void;\n  onCloseRoute: (props: { route: Route<string> }) => void;\n  onTransitionStart?: (\n    props: { route: Route<string> },\n    closing: boolean\n  ) => void;\n  onTransitionEnd?: (props: { route: Route<string> }, closing: boolean) => void;\n  onPageChangeStart?: () => void;\n  onPageChangeConfirm?: (force: boolean) => void;\n  onPageChangeCancel?: () => void;\n  onGestureStart?: (props: { route: Route<string> }) => void;\n  onGestureEnd?: (props: { route: Route<string> }) => void;\n  onGestureCancel?: (props: { route: Route<string> }) => void;\n  gestureEnabled?: boolean;\n  gestureResponseDistance?: number;\n  gestureVelocityImpact?: number;\n  mode: StackCardMode;\n  headerMode: StackHeaderMode;\n  headerShown: boolean;\n  hasAbsoluteFloatHeader: boolean;\n  headerHeight: number;\n  onHeaderHeightChange: (props: {\n    route: Route<string>;\n    height: number;\n  }) => void;\n  isParentHeaderShown: boolean;\n};\n\nconst EPSILON = 0.1;\n\nfunction CardContainer({\n  active,\n  cardOverlay,\n  cardOverlayEnabled,\n  cardShadowEnabled,\n  cardStyle,\n  cardStyleInterpolator,\n  closing,\n  gesture,\n  focused,\n  gestureDirection,\n  gestureEnabled,\n  gestureResponseDistance,\n  gestureVelocityImpact,\n  getPreviousScene,\n  getFocusedRoute,\n  mode,\n  headerDarkContent,\n  headerMode,\n  headerShown,\n  headerStyleInterpolator,\n  hasAbsoluteFloatHeader,\n  headerHeight,\n  onHeaderHeightChange,\n  isParentHeaderShown,\n  index,\n  layout,\n  onCloseRoute,\n  onOpenRoute,\n  onPageChangeCancel,\n  onPageChangeConfirm,\n  onPageChangeStart,\n  onGestureCancel,\n  onGestureEnd,\n  onGestureStart,\n  onTransitionEnd,\n  onTransitionStart,\n  renderHeader,\n  renderScene,\n  safeAreaInsetBottom,\n  safeAreaInsetLeft,\n  safeAreaInsetRight,\n  safeAreaInsetTop,\n  scene,\n  transitionSpec,\n}: Props) {\n  const parentHeaderHeight = React.useContext(HeaderHeightContext);\n\n  const handleOpen = () => {\n    const { route } = scene.descriptor;\n\n    onTransitionEnd?.({ route }, false);\n    onOpenRoute({ route });\n  };\n\n  const handleClose = () => {\n    const { route } = scene.descriptor;\n\n    onTransitionEnd?.({ route }, true);\n    onCloseRoute({ route });\n  };\n\n  const handleGestureBegin = () => {\n    const { route } = scene.descriptor;\n\n    onPageChangeStart?.();\n    onGestureStart?.({ route });\n  };\n\n  const handleGestureCanceled = () => {\n    const { route } = scene.descriptor;\n\n    onPageChangeCancel?.();\n    onGestureCancel?.({ route });\n  };\n\n  const handleGestureEnd = () => {\n    const { route } = scene.descriptor;\n\n    onGestureEnd?.({ route });\n  };\n\n  const handleTransition = ({\n    closing,\n    gesture,\n  }: {\n    closing: boolean;\n    gesture: boolean;\n  }) => {\n    const { route } = scene.descriptor;\n\n    if (!gesture) {\n      onPageChangeConfirm?.(true);\n    } else if (active && closing) {\n      onPageChangeConfirm?.(false);\n    } else {\n      onPageChangeCancel?.();\n    }\n\n    onTransitionStart?.({ route }, closing);\n  };\n\n  const insets = {\n    top: safeAreaInsetTop,\n    right: safeAreaInsetRight,\n    bottom: safeAreaInsetBottom,\n    left: safeAreaInsetLeft,\n  };\n\n  const { colors } = useTheme();\n\n  const [pointerEvents, setPointerEvents] = React.useState<'box-none' | 'none'>(\n    'box-none'\n  );\n\n  React.useEffect(() => {\n    // @ts-expect-error: AnimatedInterpolation optionally has addListener, but the type defs don't think so\n    const listener = scene.progress.next?.addListener?.(\n      ({ value }: { value: number }) => {\n        setPointerEvents(value <= EPSILON ? 'box-none' : 'none');\n      }\n    );\n\n    return () => {\n      if (listener) {\n        // @ts-expect-error: AnimatedInterpolation optionally has removedListener, but the type defs don't think so\n        scene.progress.next?.removeListener?.(listener);\n      }\n    };\n  }, [pointerEvents, scene.progress.next]);\n\n  const isModalPresentation = cardStyleInterpolator === forModalPresentationIOS;\n  const previousScene = getPreviousScene({ route: scene.descriptor.route });\n\n  let backTitle: string | undefined;\n\n  if (previousScene) {\n    const { options, route } = previousScene.descriptor;\n\n    backTitle = getHeaderTitle(options, route.name);\n  }\n\n  const headerBack = React.useMemo(\n    () => (backTitle !== undefined ? { title: backTitle } : undefined),\n    [backTitle]\n  );\n\n  return (\n    <Card\n      index={index}\n      gestureDirection={gestureDirection}\n      layout={layout}\n      insets={insets}\n      gesture={gesture}\n      current={scene.progress.current}\n      next={scene.progress.next}\n      closing={closing}\n      onOpen={handleOpen}\n      onClose={handleClose}\n      overlay={cardOverlay}\n      overlayEnabled={cardOverlayEnabled}\n      shadowEnabled={cardShadowEnabled}\n      onTransition={handleTransition}\n      onGestureBegin={handleGestureBegin}\n      onGestureCanceled={handleGestureCanceled}\n      onGestureEnd={handleGestureEnd}\n      gestureEnabled={gestureEnabled}\n      gestureResponseDistance={gestureResponseDistance}\n      gestureVelocityImpact={gestureVelocityImpact}\n      transitionSpec={transitionSpec}\n      styleInterpolator={cardStyleInterpolator}\n      accessibilityElementsHidden={!focused}\n      importantForAccessibility={focused ? 'auto' : 'no-hide-descendants'}\n      pointerEvents={active ? 'box-none' : pointerEvents}\n      pageOverflowEnabled={headerMode !== 'float' && mode === 'card'}\n      headerDarkContent={headerDarkContent}\n      containerStyle={\n        hasAbsoluteFloatHeader && headerMode !== 'screen'\n          ? { marginTop: headerHeight }\n          : null\n      }\n      contentStyle={[{ backgroundColor: colors.background }, cardStyle]}\n      style={[\n        {\n          // This is necessary to avoid unfocused larger pages increasing scroll area\n          // The issue can be seen on the web when a smaller screen is pushed over a larger one\n          overflow: active ? undefined : 'hidden',\n        },\n        StyleSheet.absoluteFill,\n      ]}\n    >\n      <View style={styles.container}>\n        <View style={styles.scene}>\n          <HeaderBackContext.Provider value={headerBack}>\n            <HeaderShownContext.Provider\n              value={isParentHeaderShown || headerShown !== false}\n            >\n              <HeaderHeightContext.Provider\n                value={headerShown ? headerHeight : parentHeaderHeight}\n              >\n                {renderScene({ route: scene.descriptor.route })}\n              </HeaderHeightContext.Provider>\n            </HeaderShownContext.Provider>\n          </HeaderBackContext.Provider>\n        </View>\n        {headerMode !== 'float' ? (\n          <ModalPresentationContext.Provider value={isModalPresentation}>\n            {renderHeader({\n              mode: 'screen',\n              layout,\n              scenes: [previousScene, scene],\n              getPreviousScene,\n              getFocusedRoute,\n              styleInterpolator: headerStyleInterpolator,\n              onContentHeightChange: onHeaderHeightChange,\n            })}\n          </ModalPresentationContext.Provider>\n        ) : null}\n      </View>\n    </Card>\n  );\n}\n\nexport default React.memo(CardContainer);\n\nconst styles = StyleSheet.create({\n  container: {\n    flex: 1,\n    flexDirection: 'column-reverse',\n  },\n  scene: {\n    flex: 1,\n  },\n});\n"]}