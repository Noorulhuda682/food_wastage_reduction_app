{"version":3,"sources":["createStackNavigator.tsx"],"names":["StackNavigator","initialRouteName","children","screenOptions","rest","headerMode","state","descriptors","navigation","StackRouter","defaultScreenOptions","options","headerShown","mode","Platform","OS","header","undefined","gestureEnabled","animationEnabled","React","useEffect","addListener","e","isFocused","requestAnimationFrame","index","defaultPrevented","dispatch","StackActions","popToTop","target","key"],"mappings":";;;;;;;AAAA;;AACA;;AACA;;AAYA;;AACA;;;;;;;;;;AAYA,SAASA,cAAT,CAAwB;AACtBC,EAAAA,gBADsB;AAEtBC,EAAAA,QAFsB;AAGtBC,EAAAA,aAHsB;AAItB,KAAGC;AAJmB,CAAxB,EAKU;AACR;AACA,QAAMC,UAAU,GAAGD,IAAI,CAACC,UAAxB;AAEA,yBACEA,UAAU,KAAK,MADjB;AAKA,yBACEA,UAAU,IAAIA,UAAU,KAAK,MAD/B;AAKA,QAAM;AAAEC,IAAAA,KAAF;AAASC,IAAAA,WAAT;AAAsBC,IAAAA;AAAtB,MAAqC,kCAMzCC,mBANyC,EAM5B;AACbR,IAAAA,gBADa;AAEbC,IAAAA,QAFa;AAGbC,IAAAA,aAHa;AAIbO,IAAAA,oBAAoB,EAAE,CAAC;AAAEC,MAAAA;AAAF,KAAD,MAAkB;AACtCC,MAAAA,WAAW,EAAEP,UAAU,GAAGA,UAAU,KAAK,MAAlB,GAA2B,IADZ;AAEtCA,MAAAA,UAAU,EACRA,UAAU,IAAIA,UAAU,KAAK,MAA7B,GACIA,UADJ,GAEID,IAAI,CAACS,IAAL,KAAc,OAAd,IACAC,sBAASC,EAAT,KAAgB,KADhB,IAEAJ,OAAO,CAACK,MAAR,KAAmBC,SAFnB,GAGA,OAHA,GAIA,QATgC;AAUtCC,MAAAA,cAAc,EAAEJ,sBAASC,EAAT,KAAgB,KAVM;AAWtCI,MAAAA,gBAAgB,EACdL,sBAASC,EAAT,KAAgB,KAAhB,IACAD,sBAASC,EAAT,KAAgB,SADhB,IAEAD,sBAASC,EAAT,KAAgB;AAdoB,KAAlB;AAJT,GAN4B,CAA3C;AA4BAK,EAAAA,KAAK,CAACC,SAAN,CACE;AAAA;;AAAA,oCACEb,UAAU,CAACc,WADb,0DACE,2BAAAd,UAAU,EAAe,UAAf,EAA4Be,CAAD,IAAO;AAC1C,YAAMC,SAAS,GAAGhB,UAAU,CAACgB,SAAX,EAAlB,CAD0C,CAG1C;AACA;;AACAC,MAAAA,qBAAqB,CAAC,MAAM;AAC1B,YACEnB,KAAK,CAACoB,KAAN,GAAc,CAAd,IACAF,SADA,IAEA,CAAED,CAAD,CAAkCI,gBAHrC,EAIE;AACA;AACA;AACAnB,UAAAA,UAAU,CAACoB,QAAX,CAAoB,EAClB,GAAGC,qBAAaC,QAAb,EADe;AAElBC,YAAAA,MAAM,EAAEzB,KAAK,CAAC0B;AAFI,WAApB;AAID;AACF,OAboB,CAArB;AAcD,KAnBS,CADZ;AAAA,GADF,EAsBE,CAACxB,UAAD,EAAaF,KAAK,CAACoB,KAAnB,EAA0BpB,KAAK,CAAC0B,GAAhC,CAtBF;AAyBA,sBACE,oBAAC,kBAAD,eACM5B,IADN;AAEE,IAAA,KAAK,EAAEE,KAFT;AAGE,IAAA,WAAW,EAAEC,WAHf;AAIE,IAAA,UAAU,EAAEC;AAJd,KADF;AAQD;;eAEc,oCAKbR,cALa,C","sourcesContent":["import * as React from 'react';\nimport { Platform } from 'react-native';\nimport {\n  useNavigationBuilder,\n  createNavigatorFactory,\n  DefaultNavigatorOptions,\n  EventArg,\n  StackRouter,\n  StackRouterOptions,\n  StackNavigationState,\n  StackActions,\n  ParamListBase,\n  StackActionHelpers,\n} from '@react-navigation/native';\nimport warnOnce from 'warn-once';\nimport StackView from '../views/Stack/StackView';\nimport type {\n  StackNavigationConfig,\n  StackNavigationOptions,\n  StackNavigationEventMap,\n  StackHeaderMode,\n} from '../types';\n\ntype Props = DefaultNavigatorOptions<StackNavigationOptions> &\n  StackRouterOptions &\n  StackNavigationConfig;\n\nfunction StackNavigator({\n  initialRouteName,\n  children,\n  screenOptions,\n  ...rest\n}: Props) {\n  // @ts-expect-error: headerMode='none' is deprecated\n  const headerMode = rest.headerMode as StackHeaderMode | 'none' | undefined;\n\n  warnOnce(\n    headerMode === 'none',\n    `Stack Navigator: 'headerMode=\"none\"' is deprecated. Use 'headerShown: false' in 'screenOptions' instead.`\n  );\n\n  warnOnce(\n    headerMode && headerMode !== 'none',\n    `Stack Navigator: 'headerMode' is moved to 'options'. Moved it to 'screenOptions' to keep current behavior.`\n  );\n\n  const { state, descriptors, navigation } = useNavigationBuilder<\n    StackNavigationState<ParamListBase>,\n    StackRouterOptions,\n    StackActionHelpers<ParamListBase>,\n    StackNavigationOptions,\n    StackNavigationEventMap\n  >(StackRouter, {\n    initialRouteName,\n    children,\n    screenOptions,\n    defaultScreenOptions: ({ options }) => ({\n      headerShown: headerMode ? headerMode !== 'none' : true,\n      headerMode:\n        headerMode && headerMode !== 'none'\n          ? headerMode\n          : rest.mode !== 'modal' &&\n            Platform.OS === 'ios' &&\n            options.header === undefined\n          ? 'float'\n          : 'screen',\n      gestureEnabled: Platform.OS === 'ios',\n      animationEnabled:\n        Platform.OS !== 'web' &&\n        Platform.OS !== 'windows' &&\n        Platform.OS !== 'macos',\n    }),\n  });\n\n  React.useEffect(\n    () =>\n      navigation.addListener?.('tabPress', (e) => {\n        const isFocused = navigation.isFocused();\n\n        // Run the operation in the next frame so we're sure all listeners have been run\n        // This is necessary to know if preventDefault() has been called\n        requestAnimationFrame(() => {\n          if (\n            state.index > 0 &&\n            isFocused &&\n            !(e as EventArg<'tabPress', true>).defaultPrevented\n          ) {\n            // When user taps on already focused tab and we're inside the tab,\n            // reset the stack to replicate native behaviour\n            navigation.dispatch({\n              ...StackActions.popToTop(),\n              target: state.key,\n            });\n          }\n        });\n      }),\n    [navigation, state.index, state.key]\n  );\n\n  return (\n    <StackView\n      {...rest}\n      state={state}\n      descriptors={descriptors}\n      navigation={navigation}\n    />\n  );\n}\n\nexport default createNavigatorFactory<\n  StackNavigationState<ParamListBase>,\n  StackNavigationOptions,\n  StackNavigationEventMap,\n  typeof StackNavigator\n>(StackNavigator);\n"]}