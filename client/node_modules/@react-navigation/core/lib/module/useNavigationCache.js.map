{"version":3,"sources":["useNavigationCache.tsx"],"names":["React","CommonActions","useNavigationCache","state","getState","navigation","setOptions","router","emitter","cache","useMemo","current","actions","actionCreators","routes","reduce","acc","route","previous","key","emit","rest","dispatch","thunk","action","source","helpers","Object","keys","name","args","create","options","o","isFocused","index"],"mappings":"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","sourcesContent":["import * as React from 'react';\nimport {\n  CommonActions,\n  NavigationAction,\n  ParamListBase,\n  NavigationState,\n  Router,\n} from '@react-navigation/routers';\nimport type { NavigationEventEmitter } from './useEventEmitter';\n\nimport type { NavigationHelpers, NavigationProp } from './types';\n\ntype Options<\n  State extends NavigationState,\n  EventMap extends Record<string, any>\n> = {\n  state: State;\n  getState: () => State;\n  navigation: NavigationHelpers<ParamListBase> &\n    Partial<NavigationProp<ParamListBase, string, any, any, any>>;\n  setOptions: (\n    cb: (options: Record<string, object>) => Record<string, object>\n  ) => void;\n  router: Router<State, NavigationAction>;\n  emitter: NavigationEventEmitter<EventMap>;\n};\n\ntype NavigationCache<\n  State extends NavigationState,\n  ScreenOptions extends {},\n  EventMap extends Record<string, any>\n> = Record<\n  string,\n  NavigationProp<ParamListBase, string, State, ScreenOptions, EventMap>\n>;\n\n/**\n * Hook to cache navigation objects for each screen in the navigator.\n * It's important to cache them to make sure navigation objects don't change between renders.\n * This lets us apply optimizations like `React.memo` to minimize re-rendering screens.\n */\nexport default function useNavigationCache<\n  State extends NavigationState,\n  ScreenOptions extends {},\n  EventMap extends Record<string, any>\n>({\n  state,\n  getState,\n  navigation,\n  setOptions,\n  router,\n  emitter,\n}: Options<State, EventMap>) {\n  // Cache object which holds navigation objects for each screen\n  // We use `React.useMemo` instead of `React.useRef` coz we want to invalidate it when deps change\n  // In reality, these deps will rarely change, if ever\n  const cache = React.useMemo(\n    () => ({ current: {} as NavigationCache<State, ScreenOptions, EventMap> }),\n    // eslint-disable-next-line react-hooks/exhaustive-deps\n    [getState, navigation, setOptions, router, emitter]\n  );\n\n  const actions = {\n    ...router.actionCreators,\n    ...CommonActions,\n  };\n\n  cache.current = state.routes.reduce<\n    NavigationCache<State, ScreenOptions, EventMap>\n  >((acc, route) => {\n    const previous = cache.current[route.key];\n\n    if (previous) {\n      // If a cached navigation object already exists, reuse it\n      acc[route.key] = previous;\n    } else {\n      // eslint-disable-next-line @typescript-eslint/no-unused-vars\n      const { emit, ...rest } = navigation;\n\n      const dispatch = (\n        thunk:\n          | NavigationAction\n          | ((state: State) => NavigationAction | null | undefined)\n      ) => {\n        const action = typeof thunk === 'function' ? thunk(getState()) : thunk;\n\n        if (action != null) {\n          navigation.dispatch({ source: route.key, ...action });\n        }\n      };\n\n      const helpers = Object.keys(actions).reduce<Record<string, () => void>>(\n        (acc, name) => {\n          // @ts-expect-error: name is a valid key, but TypeScript is dumb\n          acc[name] = (...args: any) => dispatch(actions[name](...args));\n          return acc;\n        },\n        {}\n      );\n\n      acc[route.key] = {\n        ...rest,\n        ...helpers,\n        // FIXME: too much work to fix the types for now\n        ...(emitter.create(route.key) as any),\n        dispatch,\n        setOptions: (options: object) =>\n          setOptions((o) => ({\n            ...o,\n            [route.key]: { ...o[route.key], ...options },\n          })),\n        isFocused: () => {\n          const state = getState();\n\n          if (state.routes[state.index].key !== route.key) {\n            return false;\n          }\n\n          // If the current screen is focused, we also need to check if parent navigator is focused\n          // This makes sure that we return the focus state in the whole tree, not just this navigator\n          return navigation ? navigation.isFocused() : true;\n        },\n      };\n    }\n\n    return acc;\n  }, {});\n\n  return cache.current;\n}\n"]}